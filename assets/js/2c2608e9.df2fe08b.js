"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[76],{6606:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Murray Python Package/Walkthrough","title":"Walkthrough","description":"This guide constains an overview of package Murray, as well as instructions for its use, although it is not necessary to do so if you don\'t need all of them. First of all, we must import the necessary functions and packages.","source":"@site/docs/Murray Python Package/Walkthrough.md","sourceDirName":"Murray Python Package","slug":"/Murray Python Package/Walkthrough","permalink":"/murray/docs/Murray Python Package/Walkthrough","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/murray/docs/Murray Python Package/Getting Started"},"next":{"title":"Streamlit Murray App","permalink":"/murray/docs/category/streamlit-murray-app"}}');var s=t(4848),r=t(8453);const i={sidebar_position:2},l="Walkthrough",o={},c=[{value:"Experimental Design",id:"experimental-design",level:2},{value:"1. Upload data",id:"1-upload-data",level:3},{value:"Cleaned data",id:"cleaned-data",level:4},{value:"2. Experimental design",id:"2-experimental-design",level:3},{value:"3. Results",id:"3-results",level:3},{value:"Treatment and control groups",id:"treatment-and-control-groups",level:4},{value:"Impact graphs",id:"impact-graphs",level:4},{value:"Weights",id:"weights",level:4},{value:"Incremental results",id:"incremental-results",level:3},{value:"Metrics",id:"metrics",level:3},{value:"Experimental Evaluation",id:"experimental-evaluation",level:2},{value:"1. Data",id:"1-data",level:3},{value:"2. Experimental evaluation",id:"2-experimental-evaluation",level:3},{value:"3. Results",id:"3-results-1",level:3},{value:"Impact graph",id:"impact-graph",level:4},{value:"Incremental results",id:"incremental-results-1",level:4},{value:"Permutation test",id:"permutation-test",level:4}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"walkthrough",children:"Walkthrough"})}),"\n",(0,s.jsx)(n.p,{children:"This guide constains an overview of package Murray, as well as instructions for its use, although it is not necessary to do so if you don't need all of them. First of all, we must import the necessary functions and packages."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pandas as pd\r\nfrom Murray import cleaned_data\r\nfrom Murray import plot_geodata,plot_impact_graphs,plot_impact_graphs_evaluation,plot_metrics,plot_permutation_test\r\nfrom Murray import print_locations,print_weights,print_incremental_results,print_incremental_results_evaluation\r\nfrom Murray import run_geo_analysis,run_geo_evaluation\n"})}),"\n",(0,s.jsx)(n.h2,{id:"experimental-design",children:"Experimental Design"}),"\n",(0,s.jsx)(n.p,{children:"First of all, we must import the functions that we are going to use. On this occasion, all of them will be used to explain each one."}),"\n",(0,s.jsx)(n.h3,{id:"1-upload-data",children:"1. Upload data"}),"\n",(0,s.jsx)(n.p,{children:"First, you need to read data with Pandas:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'data = pd.read_csv("data.csv")\n'})}),"\n",(0,s.jsx)(n.h4,{id:"cleaned-data",children:"Cleaned data"}),"\n",(0,s.jsxs)(n.p,{children:["After, this function is necessary to clean it and avoid errors. In the  ",(0,s.jsx)(n.code,{children:"cleaned_data "})," function you have to add the name of target column, name of location and date columns. For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"data = cleaned_data(data,col_target='sessions',col_locations='location',col_dates='date')\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"If you data have NaN values or the data is incomplete, this function is necessary to clean the data and not get errors."})}),"\n",(0,s.jsxs)(n.p,{children:["The function will clean the data of irregularities. After, you can use the ",(0,s.jsx)(n.code,{children:"plot_geodata"})," function to see the data."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"plot_geodata(data)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Locale Dropdown",src:t(9934).A+"",width:"2400",height:"1000"})}),"\n",(0,s.jsx)(n.h3,{id:"2-experimental-design",children:"2. Experimental design"}),"\n",(0,s.jsxs)(n.p,{children:["Now, you must configure the experimental design. In the ",(0,s.jsx)(n.code,{children:"run_geo_analysis"})," fuction must add the following parameters:"]}),"\n",(0,s.jsx)(n.p,{children:"The parameters needed to run this function are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"data"}),": A data frame containing historical conversions by locations. This parameters must cotain a ",(0,s.jsx)(n.code,{children:"location"})," column, ",(0,s.jsx)(n.code,{children:"time"})," column and ",(0,s.jsx)(n.code,{children:"Y"})," column. These columns are generated after running cleaned_function, or they can be added manually with these features. Alternatively, the data must already contain these columns"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"excluded_states"}),": A list of states to exclude from treatment groups. These states will not be included in the treatment groups, but these can be included in the control groups."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maximum_treatment_percentage"}),": Maximum percentage of the target variable that can be contained in the treatment group."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"significance_level"}),": A number which is a significance level, that is mean, with ",(0,s.jsx)(n.code,{children:"significance_level=0.1"})," you have a 90% confidence level in your results."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"deltas_range"}),": This parameter contains a range of different lifts. You can add the minimum lift, maximum lift and the steps. For example, if ",(0,s.jsx)(n.code,{children:"deltas_range = (0.01, 0.3, 0.02)"})," so the lifts will from 1% until 30% with 2% increments."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"periods_range"}),": A list constain a range of differents periods. This one is very parameter before. You can agg the minimum period, maximum period and the steps. For example, if ",(0,s.jsx)(n.code,{children:"periods_range = (5, 40, 5)"}),", the lifts will range from 5 days to 40 days, increasing in 5 day increments."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"geo_test = run_geo_analysis(\r\n    data = data,\r\n    excluded_locations = ['mexico city', 'm\xe9xico'],\r\n    maximum_treatment_percentage=0.3,\r\n    significance_level = 0.1,\r\n    deltas_range = (0.01, 0.3, 0.02),\r\n    periods_range = (5, 45, 5)\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"The results are shown in a heatmap where the Quality Score is displayed, which is a measure of the quality of the experiment based on the number of treatments, periods and lift. By default, the number of treatment locations ranges from 20% to 50% of the total locations. For example, if you have 32 locations, the range of size of treatment groups is 6-16 locations.\r\nWhen the simulation finishes, you can see the heatmap of the results like this:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Locale Dropdown",src:t(4170).A+"",width:"1438",height:"513"})}),"\n",(0,s.jsx)(n.h3,{id:"3-results",children:"3. Results"}),"\n",(0,s.jsx)(n.p,{children:"Once the heatmap is displayed you can choose the best configuration for you, after that you can use the following functions to display the experiment results, such as the treatment and control locations, as well as metrics like MAE (Mean Absolute Error) and MAPE (Mean Absolute Percentage Error)."}),"\n",(0,s.jsx)(n.h4,{id:"treatment-and-control-groups",children:"Treatment and control groups"}),"\n",(0,s.jsxs)(n.p,{children:["To obtain the treatment and control groups, you must run the  ",(0,s.jsx)(n.code,{children:"print_locations()"})," function. This function prints the selected treatment and control groups. The required parameters are:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"geo_test"}),": Results of the main function (",(0,s.jsx)(n.code,{children:"run_geo_analysis"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"treatment_percentage"}),": The treatment percentage, which can be viewed in the heatmap generated by the ",(0,s.jsx)(n.code,{children:"run_geo_analysis"})," function."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"print_locations(geo_test=geo_test, treatment_percentage=27.53)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Treatment Locations: ['california', 'chiapas', 'durango', 'guerrero', 'hidalgo', 'jalisco', 'michoacan', 'morelos', 'nayarit', 'oaxaca', 'queretaro', 'sonora', 'tabasco', 'veracruz']\r\nControl Locations: ['chihuahua', 'san luis potosi', 'aguascalientes', 'nuevo leon', 'campeche', 'guanajuato', 'zacatecas', 'tamaulipas', 'baja california sur', 'mexico city', 'coahuila', 'yucatan', 'state of mexico', 'tlaxcala', 'colima', 'puebla', 'baja california']\n"})}),"\n",(0,s.jsx)(n.h4,{id:"impact-graphs",children:"Impact graphs"}),"\n",(0,s.jsxs)(n.p,{children:["You can get a graph about lift, point difference and cumulative effect with the ",(0,s.jsx)(n.code,{children:"plot_impact_graphs()"})," function. The parameters for run are:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"geo_test"}),": Results of the main function (",(0,s.jsx)(n.code,{children:"run_geo_analysis"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"period"}),": The period you want to see the impact graph."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"treatment_percentage"}),": The number of treatment percentage, this number you can see in the heatmap of the ",(0,s.jsx)(n.code,{children:"run_geo_analysis"})," function."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"plot_impact_graphs(geo_test=geo_test, period=10, treatment_percentage=27.53)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Locale Dropdown",src:t(1508).A+"",width:"2400",height:"1000"})}),"\n",(0,s.jsx)(n.h4,{id:"weights",children:"Weights"}),"\n",(0,s.jsxs)(n.p,{children:["Murray can print the weights of the control locations used to build the counterfactual. To do this, you just need to run the ",(0,s.jsx)(n.code,{children:"print_weights()"})," function. The parameters are the same as those used in the ",(0,s.jsx)(n.code,{children:"print_locations()"})," function. For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print_weights(geo_test=geo_test, treatment_percentage=27.53)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"incremental-results",children:"Incremental results"}),"\n",(0,s.jsxs)(n.p,{children:["You can get the incremental results with the ",(0,s.jsx)(n.code,{children:"print_incremental_results()"})," function. The parameter is:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"geo_test"}),": Results of the main function (",(0,s.jsx)(n.code,{children:"run_geo_analysis"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print_incremental_results(geo_test=geo_test, period=10, treatment_percentage=27.53)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"==============================\r\n     Incremental Results      \r\n==============================\r\nATT: 22125.98\r\nLift total: 442519.56\r\n==============================\n"})}),"\n",(0,s.jsx)(n.h3,{id:"metrics",children:"Metrics"}),"\n",(0,s.jsxs)(n.p,{children:["You can get the metrics of the experiment with the ",(0,s.jsx)(n.code,{children:"plot_metrics()"})," function. The parameter is:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"geo_test"}),": Results of the main function (",(0,s.jsx)(n.code,{children:"run_geo_analysis"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"plot_metrics(geo_test)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Locale Dropdown",src:t(8067).A+"",width:"2400",height:"1000"})}),"\n",(0,s.jsx)(n.h2,{id:"experimental-evaluation",children:"Experimental Evaluation"}),"\n",(0,s.jsx)(n.h3,{id:"1-data",children:"1. Data"}),"\n",(0,s.jsx)(n.p,{children:"To evaluate an implemented experiment, you can use Murray. This analysis is simpler than the design but follows a similar workflow and function structure. The first step is to load and read your data."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'data = pd.read_csv("data_marketing_campaign.csv")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Then, as explained in the experimental design, you can clean the data with the ",(0,s.jsx)(n.code,{children:"cleaned_data"})," function."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"data = cleaned_data(data,col_target='sessions',col_locations='location',col_dates='date')\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now, you can also use the same function to display the graph of the entered data."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"plot_geodata(data)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Locale Dropdown",src:t(9934).A+"",width:"2400",height:"1000"})}),"\n",(0,s.jsx)(n.h3,{id:"2-experimental-evaluation",children:"2. Experimental evaluation"}),"\n",(0,s.jsxs)(n.p,{children:["This part is very similar to the experimental design, but in this case you must add the parameter to ",(0,s.jsx)(n.code,{children:"run_geo_evaluation"})," function. The parameters needed to run are:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"data"}),": A DataFrame containing historical conversions by location. This parameter must include a ",(0,s.jsx)(n.code,{children:"location"})," column, a ",(0,s.jsx)(n.code,{children:"time"})," column, and a ",(0,s.jsx)(n.code,{children:"Y"})," column. These columns are generated after running the cleaned_function, or they can be added manually with these features. Alternatively, the data must already contain these columns."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"start_treatment"}),": The start date of the treatment."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"end_treatment"}),": The end date of the treatment."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"treatment_group"}),": The locations that are in the treatment group."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"spend"}),": The expenditure value during the treatment."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"results = run_geo_evaluation(\r\n     data,start_treatment='01-12-2024',\r\n     end_treatment='31-12-2024',\r\n     treatment_group=['durango','puebla','queretaro'],\r\n     spend=10000\r\n     )\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"It is important to enter the dates in DD/MM/YYYY format to avoid errors."})}),"\n",(0,s.jsx)(n.h3,{id:"3-results-1",children:"3. Results"}),"\n",(0,s.jsx)(n.p,{children:"Once the post analysis is finished you can get the results with the following functions:"}),"\n",(0,s.jsx)(n.h4,{id:"impact-graph",children:"Impact graph"}),"\n",(0,s.jsxs)(n.p,{children:["You can get the impact graph with the ",(0,s.jsx)(n.code,{children:"plot_impact_graphs_evaluation()"})," function. The parameters are:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"results"}),": The results of the post analysis."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"plot_impact_graphs_evaluation(results)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Locale Dropdown",src:t(1964).A+"",width:"2400",height:"1000"})}),"\n",(0,s.jsx)(n.h4,{id:"incremental-results-1",children:"Incremental results"}),"\n",(0,s.jsxs)(n.p,{children:["You can get the incremental results with the ",(0,s.jsx)(n.code,{children:"print_incremental_results_evaluation()"})," function. The parameters are:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"results"}),": The results of ",(0,s.jsx)(n.code,{children:"run_geo_evaluation()"})," function."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"metric"}),': The metric which you want to calculate ("iROAS" or "iCPA")']}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print_incremental_results_evaluation(results_evaluation=results,metric='iCPA')\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"==============================\r\n     Incremental Results      \r\n==============================\r\nATT: 858.21\r\nLift total: 23171.54\r\niCPA: 0.93\r\n==============================\n"})}),"\n",(0,s.jsx)(n.h4,{id:"permutation-test",children:"Permutation test"}),"\n",(0,s.jsxs)(n.p,{children:["You can get the permutation test with the ",(0,s.jsx)(n.code,{children:"plot_permutation_test()"})," function. The parameters are:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"results"}),": The results of the post analysis."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"plot_permutation_test(results_evaluation=results)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Locale Dropdown",src:t(5404).A+"",width:"1153",height:"525"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},4170:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/heatmap-c1f385cf1b455361e0e25c7eaca61976.png"},9934:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/plot_data-9327689323ad8fba018c28da27e4e1bf.png"},1508:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/plot_impact-dcc1e4cf273ec6cda865d1eed18565ff.png"},1964:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/plot_impact2-88d857e3af65e0a815d3a4a8c2ed65a2.png"},8067:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/plot_metrics-1f75233719973654a38e193d32778182.png"},5404:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/test-267a966b56d567a8c5245bc8fb8cc76e.png"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var a=t(6540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);